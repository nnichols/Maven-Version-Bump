#!/bin/bash

#
# Update the artifact version in pom.xml and add a new entry in CHANGELOG.md
# Script arguments:
# $1 = mode (major, minor, bugfix)
#

#
# Takes a version number, and the mode to bump it, and increments/resets
# the proper components so that the result is placed in the variable `new_version`.
#
# $1 = mode (major, minor, bugfix)
# $2 = version (x.y.z)
#
function bump {
  local mode="$1"
  local old="$2"
  # find out the three components of the current version
  local parts=( ${old//./ } )
  # now bump it up based on the mode
  case "$1" in
    major)
      local bv=$((parts[0] + 1))
      new_version="${bv}.0.0"
      ;;
    minor)
      local bv=$((parts[1] + 1))
      new_version="${parts[0]}.${bv}.0"
      ;;
    bugfix)
      local bv=$((parts[2] + 1))
      new_version="${parts[0]}.${parts[1]}.${bv}"
      ;;
  esac
}

#
# Read the existing project name and version number from pom.xml and populate the following variables:
#
# $version = "1.54.3"
# $today = "2019 Dec 12"
#
function pull_values {
  local fline=`head -1 ${pom}`
  version=`cat pom.xml | grep "<version>.*</version>" | head -1 | awk -F'[><]' '{print $3}'`
  today=$(date +"%Y %b %d")
}

#
# Update the pom.xml file with with maven
#
function update_pom {
  mvn versions:set -DnewVersion="${new_version}"
}

#
# Update the CHANGELOG.md file to add in the new template for the release notes.
#
function update_docs {
  sed -e "s/\${VER}/$new_version/g" \
	  -e "s/\${DATE}/$today/g" ${style} | cat - ${log} > cl.tmp && mv cl.tmp ${log}
}

# Set up the defaults for the script
pom="pom.xml"
log="CHANGELOG.md"
style="doc/templates/changelog_entry.txt"

pull_values
bump $1 ${version}
update_pom
update_docs
